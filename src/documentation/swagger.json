{
  "openapi": "3.0.1",
  "info": {
    "title": "GameStore API",
    "description": "Documentation of GameStore REST API.",
    "contact": {
      "email": "annacelina@mail.ru"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:3000/"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "Get products",
        "description": "Get array of products specified by optional parameters.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "displayName",
            "in": "query",
            "description": "Get product with specified displayName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "query",
            "description": "Get products between the specified price range. Either lower bound or upper bound may not be specified, but not both. Value must be in format 'x:y', where x and y are optional, positive (including 0), floating point numbers, y >= x.",
            "schema": {
              "type": "string",
              "format": "x:y"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Get sorted list of products. Value for 'sortBy' must be in format 'x:y', where x can be 'displayName', 'price', 'totalRating', 'createdAt', y - 'asc', 'desc'.",
            "schema": {
              "type": "string",
              "format": "x:y"
            }
          },
          {
            "name": "minRating",
            "in": "query",
            "description": "Get product with rating equal to or higher provided value. Value for 'minRating' must be a floating point number between 0 and 5.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used for pagination. By default, page size is 20, so without this parameter being specified first 20 products returned. By default page must be full number higher from 0.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned not empty list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product(s) not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Product(s) not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}/rate": {
      "post": {
        "tags": ["products"],
        "summary": "Rate product",
        "description": "Add or update existing product rating of user by productId.",
        "operationId": "updateProductRating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New rating value and optional comment.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "number"
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Rating for product successfully updated."
          },
          "201": {
            "description": "Rating for product successfully added."
          },
          "404": {
            "description": "User or product with provided id not found."
          },
          "500": {
            "description": "An error occured trying to ${existingUserRating update/add rating."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "Get categories",
        "description": "Get array of all categories.",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "Successfully returned not empty list of categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Categories not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Categories not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["categories"],
        "summary": "Get category specified by id.",
        "description": "Get category by id specified with additional params.",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of category",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeProducts",
            "in": "query",
            "description": "Include all products related to category with provided id in array under 'products' key.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeTop3Products",
            "in": "query",
            "description": "Include 3 (or less) products with highest totalRatings related to category with provided id in array under 'products' key. Can be used in pair with 'includeProducts' parameter. Possible values: 'top'.",
            "schema": {
              "type": "string",
              "enum": ["top"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return category found by id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category with provided id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Category with id=0123 not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": ["users"],
        "summary": "Create account",
        "description": "Creating account for users who do not have account with provided username.",
        "operationId": "createAccount",
        "requestBody": {
          "description": "User properties. Valid email must be provided as username. Password must be at least 8 characters long, contain at least one lowercase and one uppercase letter, contain at least one special character. Properties 'firstname' and 'lastname' are optional. If account successfully created, username will be returned.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account with provided username successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account with username test@test.com successfully created."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "User with provided username already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "User with provided username test@test.com already exists."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured processing user create request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "An error occured processing user create request."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authenticate": {
      "post": {
        "tags": ["users"],
        "summary": "Log in",
        "description": "Authenticate using username and password and getting access token.",
        "operationId": "authenticate",
        "requestBody": {
          "description": "User credentials. Username must be valid email.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authenticated successfully. Access token and refresh token received.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect password or user with provided password dot not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "User with provided username does not exist."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": ["users"],
        "summary": "Get access token",
        "description": "Get new access token by providing refresh token.",
        "operationId": "getAccessToken",
        "requestBody": {
          "description": "Refresh token must be provided.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned new accessToken.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to get new access token (provided refresh token is not valid).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Not allowed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["users"],
        "summary": "Deauthenticate refresh token",
        "description": "Delete refresh token on server to prevent further generation of access tokens.",
        "operationId": "logout",
        "requestBody": {
          "description": "Refresh token must be provided.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully deleted refresh token.",
            "content": {}
          },
          "404": {
            "description": "Refresh token not deleted, not valid refresh token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Logout unsuccessful. Check token."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "put": {
        "tags": ["users"],
        "summary": "Update profile info",
        "description": "Update user firstname or lastname.",
        "operationId": "updateProfile",
        "requestBody": {
          "description": "New values for either firstname or lastname (or both) must be provided.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated user profile info. Profile info returned and response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured processing user update request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "An error occured processing user update request."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/profile/password": {
      "post": {
        "tags": ["users"],
        "summary": "Update profile password",
        "description": "Update profile password by provided old password and new password. ",
        "operationId": "updatePassword",
        "requestBody": {
          "description": "New password must be at least 8 characters long, contain at least one lowercase and one uppercase letter, contain at least one special character.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Password successfully updated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect old password or user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Incorrect old password."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured processing password update request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "An error occured processing password update request."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalRating": {
            "type": "number"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
